/* eslint-disable react/no-unused-state */
/* eslint-disable react/destructuring-assignment */
import React from 'react';
import { Route, Link } from 'react-router-dom';
import { connect } from 'react-redux';
// import classnames from 'classnames';
// TODO: change name of ECRCredential to more generic name
import ECRCredentials from './ecr-credentials';
import ecrLogo from '../../../../images/ecr.svg';
import azureLogo from '../../../../images/azure.svg';
import dockerLogo from '../../../../images/docker.svg';
import gcrLogo from '../../../../images/gcr.svg';
import gitlabLogo from '../../../../images/gitlab.svg';
import jfrogLogo from '../../../../images/jfrog.svg';
import harborLogo from '../../../../images/harbor.svg';
import redHatLogo from '../../../../images/red-hat.svg';
import RegistryDetails from './registry-details';
import {
  ComponentChange, doNotChangeComponent, breadcrumbChange,
} from '../../../actions/app-actions';

class ContainerImageRegistryCredentials extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      changeState: false,
    };
    this.changeComponent = this.changeComponent.bind(this);
  }

  changeComponent() {
    this.props.dispatch(ComponentChange());
  }

  componentDidMount() {
    this.props.dispatch(doNotChangeComponent());
    this.props.dispatch(breadcrumbChange([{name: 'Registries'}]));
  }

  componentDidUpdate() {
    const { match = {} } = this.props;
    if (window.location.hash === `#${match.path}`) {
      this.props.dispatch(breadcrumbChange([{ name: 'Registries' }]));
      this.props.dispatch(doNotChangeComponent());
    }
  }

  render() {
    const {
      match = {}, changeComponent
    } = this.props;
    const registryCredentialsMenu = [
      {
        id: 'ecr',
        iconClass: 'icon-aws-logo',
        displayName: 'ECR',
        logo: ecrLogo,
        logoClass: 'logo-box ecr',
        component: ECRCredentials,
        initialValues: {
          non_secret: {
            use_iam_role: false,
          }
        },
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.use_iam_role',
            label: 'Use AWS IAM Role',
            type: 'toggle',
          },
          {
            name: 'non_secret.aws_access_key_id',
            label: 'AWS Access Key',
            disableOnField: 'non_secret.use_iam_role',
          },
          {
            name: 'secret.aws_secret_access_key',
            label: 'AWS Secret Key',
            type: 'password',
            disableOnField: 'non_secret.use_iam_role',
          },
          {
            name: 'non_secret.aws_region_name',
            label: 'AWS Region',
          },
          {
            name: 'non_secret.registry_id',
            label: 'AWS Account ID',
            labelInfo:
              '(Optional) Pull from registries belonging to other AWS accounts',
          },
        ],
      },
      {
        id: 'azure_container_registry',
        iconClass: 'icon-azure-logo',
        displayName: 'Azure',
        logo: azureLogo,
        logoClass: 'logo-box azure',
        component: ECRCredentials,
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.azure_registry_url',
            label: 'Registry URL',
          },
          {
            name: 'non_secret.azure_registry_username',
            label: 'Registry Username',
          },
          {
            name: 'secret.azure_registry_password',
            label: 'Registry Password',
            type: 'password',
          },
        ],
      },
      {
        id: 'google_container_registry',
        iconClass: 'icon-gcr',
        displayName: 'GCR',
        logo: gcrLogo,
        logoClass: 'logo-box gcr',
        component: ECRCredentials,
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.registry_hostname',
            label: 'Registry URL',
            labelInfo: 'e.g.: https://us.gcr.io',
          },
          {
            name: 'file.service_account_json',
            label: 'Service Account Json',
            labelInfo:
              'Please enable Cloud Resource Manager API and Container Registry API in Google Cloud',
            type: 'file',
          },
        ],
      },
      {
        id: 'docker_hub',
        iconClass: 'icon-docker-logo',
        displayName: 'Docker Hub',
        logo: dockerLogo,
        logoClass: 'logo-box docker',
        instructions: {
          version: 'API version v2',
        },
        component: ECRCredentials,
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.docker_hub_namespace',
            label: 'Namespace',
            labelInfo: 'e.g. nginx',
          },
          {
            name: 'non_secret.docker_hub_username',
            label: 'Username',
          },
          {
            name: 'secret.docker_hub_password',
            label: 'Password',
            type: 'password',
          },
        ],
      },
      {
        id: 'docker_private_registry',
        iconClass: 'icon-docker-logo',
        displayName: 'Docker (self hosted)',
        logo: dockerLogo,
        logoClass: 'logo-box docker',
        component: ECRCredentials,
        instructions: {
          version: 'API version v2',
          title: 'Using Certificate based Docker client Authentication?',
          message:
            "A custom certificate is configured by creating a directory under /etc/docker/certs.d on Deepfence console machine, using the same name as the registry's hostname provided above.  All *.crt files are added to this directory as CA roots.",
          link: 'https://docs.docker.com/engine/security/certificates/',
        },
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.docker_registry_url',
            label: 'Registry URL',
          },
          {
            name: 'non_secret.docker_username',
            label: 'Username',
          },
          {
            name: 'secret.docker_password',
            label: 'Password',
            type: 'password',
          },
        ],
      },
      {
        id: 'quay',
        iconClass: 'icon-redhat',
        logo: redHatLogo,
        logoClass: 'logo-box redhat',
        displayName: 'Quay',

        component: ECRCredentials,
        instructions: {
          title: 'Using Certificate based Docker client Authentication?',
          message:
            "A custom certificate is configured by creating a directory under /etc/docker/certs.d on Deepfence console machine, using the same name as the registry's hostname provided above.  All *.crt files are added to this directory as CA roots.",
          link: 'https://docs.docker.com/engine/security/certificates/',
        },
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.quay_registry_url',
            label: 'Registry URL',
            labelInfo: 'e.g. https://quay.io',
          },
          {
            name: 'non_secret.quay_namespace',
            label: 'Namespace',
            labelInfo: 'Organization name',
          },
          {
            name: 'secret.quay_access_token',
            label: 'OAuth 2 Access Token (Optional)',
            type: 'password',
            labelInfo: '(Optional) It is needed only for private images',
          },
        ],
      },
      {
        id: 'harbor',
        iconClass: 'icon-harbor-logo',
        logo: harborLogo,
        logoClass: 'logo-box harbor',
        displayName: 'Harbor',
        instructions: {
          version: '1.8.2 and above',
          title: 'Using Certificate based Docker client Authentication?',
          message:
            "A custom certificate is configured by creating a directory under /etc/docker/certs.d on Deepfence console machine, using the same name as the registry's hostname provided above.  All *.crt files are added to this directory as CA roots.",
          link: 'https://docs.docker.com/engine/security/certificates/',
        },
        component: ECRCredentials,
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.harbor_registry_url',
            label: 'Registry URL',
          },
          {
            name: 'non_secret.harbor_username',
            label: 'Username',
          },
          {
            name: 'secret.harbor_password',
            label: 'Password',
            type: 'password',
          },
        ],
      },
      {
        id: 'gitlab',
        iconClass: 'icon-gitlab',
        displayName: 'Gitlab',
        logo: gitlabLogo,
        logoClass: 'logo-box gitlab',
        component: ECRCredentials,
        instructions: {
          title: 'Using Certificate based Docker client Authentication?',
          message:
            "A custom certificate is configured by creating a directory under /etc/docker/certs.d on Deepfence console machine, using the same name as the registry's hostname provided above.  All *.crt files are added to this directory as CA roots.",
          link: 'https://docs.docker.com/engine/security/certificates/',
          version: '11.8 and above',
        },
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.gitlab_server_url',
            label: 'Gitlab Server URL',
            labelInfo: 'e.g. https://gitlab.example.com',
          },
          {
            name: 'non_secret.gitlab_registry_url',
            label: 'Gitlab Registry URL',
            labelInfo:
              'e.g. registry.gitlab.example.com (for registries ' +
              'configured under its own domain) or ' +
              'gitlab.example.com:5050 (for registries configured ' +
              'under an existing gitlab domain, gitlab.example.com)',
          },
          {
            name: 'secret.gitlab_access_token',
            label: 'Gitlab Personal Access Token',
          },
        ],
      },
      {
        id: 'jfrog_container_registry',
        iconClass: 'icon-jfrog',
        displayName: 'JFrog',
        logo: jfrogLogo,
        logoClass: 'logo-box jfrog',
        instructions: {
          version: '6.19.1 and above',
          title: 'Using Certificate based Docker client Authentication?',
          message:
            "A custom certificate is configured by creating a directory under /etc/docker/certs.d on Deepfence console machine, using the same name as the registry's hostname provided above.  All *.crt files are added to this directory as CA roots.",
          link: 'https://docs.docker.com/engine/security/certificates/',
        },
        component: ECRCredentials,
        formFields: [
          {
            name: 'name',
            label: 'Registry Name',
          },
          {
            name: 'non_secret.jfrog_registry_url',
            label: 'Registry URL',
            labelInfo: 'e.g. https://jfrog.company.com',
          },
          {
            name: 'non_secret.jfrog_repository',
            label: 'Repository',
            labelInfo: 'e.g. docker',
          },
          {
            name: 'non_secret.jfrog_username',
            label: 'Username',
          },
          {
            name: 'secret.jfrog_password',
            label: 'Password',
            type: 'password',
          },
        ],
      },
    ];
    if (changeComponent === false) {
      return (
        <div>
          <div className="heading registry-heading">
            <span>Image Registry Vulnerability Scan</span>
          </div>
          <div className="registry-inner-wrapper">
            {registryCredentialsMenu.map(registryCredential => (
              // eslint-disable-next-line react/no-array-index-key
              <div key={registryCredential.id} className="registry-box">
                <div className={registryCredential.logoClass}>
                  <img src={registryCredential.logo} alt="logo" />
                </div>
                {/* <span>{registryCredential.displayName}</span> */}
                <Link to={`${match.url}/${registryCredential.id}`}>
                  <button
                    type="button"
                    className="btn-configure"
                    onClick={this.changeComponent}
                  >
                    {registryCredential.displayName}
                  </button>
                </Link>
              </div>
            ))}
          </div>
          <Route exact path={match.path} />
        </div>
      );
    }
    return <RegistryDetails match={match} />;
  }
}

function mapStateToProps(state) {
  return {
    changeComponent: state.get('changeComponent'),
  };
}

export default connect(mapStateToProps)(ContainerImageRegistryCredentials);
